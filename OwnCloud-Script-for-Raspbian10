#!/bin/bash
set -e

if [ "$#" != "6" ]
then
	echo "Veuillez entrer les parametres suivants :"
	echo "
     ██╗    1 : Un mot de passe pour l'utilisateur root de MySQL         ██╗     
     ╚██╗   2 : Un nom pour votre base de donnees                       ██╔╝     
█████╗╚██╗  3 : Un nom d'utilisateur rattache a votre base de donnees  ██╔╝█████╗
╚════╝██╔╝  4 : Un mot de passe pour cet utilisateur                   ╚██╗╚════╝
     ██╔╝   5 : Un nom pour votre OwnCloud (www.mon.exemple.fr)         ╚██╗     
     ╚═╝    6 : Votre adresse mail                                       ╚═╝     
"

else

echo "
 ██████╗ ██╗    ██╗███╗   ██╗ ██████╗██╗      ██████╗ ██╗   ██╗██████╗ 
██╔═══██╗██║    ██║████╗  ██║██╔════╝██║     ██╔═══██╗██║   ██║██╔══██╗
██║   ██║██║ █╗ ██║██╔██╗ ██║██║     ██║     ██║   ██║██║   ██║██║  ██║
██║   ██║██║███╗██║██║╚██╗██║██║     ██║     ██║   ██║██║   ██║██║  ██║
╚██████╔╝╚███╔███╔╝██║ ╚████║╚██████╗███████╗╚██████╔╝╚██████╔╝██████╔╝
 ╚═════╝  ╚══╝╚══╝ ╚═╝  ╚═══╝ ╚═════╝╚══════╝ ╚═════╝  ╚═════╝ ╚═════╝ 
                                                                       "


echo "Update :"
echo ""
sudo apt-get -y update

echo ""
echo "Upgrade :"
echo ""
sudo apt-get -y upgrade

echo ""
echo "PHP :"
echo ""
sudo apt-get -y install php7.3-common php7.3-curl php7.3-gd php7.3-imap php7.3-intl php7.3-json php7.3-ldap php7.3-mbstring php7.3-mysql php7.3-xml php7.3-zip php7.3-fpm

echo ""
echo "MariaDB :"
echo ""
sudo apt-get -y install mariadb-server


echo ""
echo "Nginx :"
echo ""
sudo apt-get -y install nginx

echo ""
echo "Outils utiles :"
echo ""
sudo apt-get -y install curl wget dnsutils

echo ""
echo "OwnCloud :"
echo ""
wget -nv https://download.owncloud.org/download/repositories/production/Debian_10/Release.key -O Release.key  
sudo apt-key add - < Release.key
echo 'deb http://download.owncloud.org/download/repositories/production/Debian_10/ /' | sudo tee /etc/apt/sources.list.d/owncloud.list
echo ""
echo "Transport HTTPS :"
echo ""
sudo apt-get install apt-transport-https
sudo apt-get update
sudo apt-get install owncloud-files
echo ""
echo "OwnCloud installé"
echo ""
echo "Configuration MySQL :"
echo ""
sudo script -q -c 'mysql_secure_installation' <<ENDDOC /dev/null

Y
$1
$1
Y
Y
Y
Y
ENDDOC

echo ""
echo "Creation DB et User :"
echo ""
sudo mysql -u root -p$1 <<ENDDOC
CREATE DATABASE $2 CHARACTER SET utf8;
GRANT ALL PRIVILEGES ON $2.* TO '$3'@'localhost' IDENTIFIED BY '$4';
FLUSH PRIVILEGES;
exit
ENDDOC

sudo rm /etc/nginx/sites-available/default
sudo unlink /etc/nginx/sites-enabled/default

sudo touch /etc/nginx/sites-available/owncloud.conf
sudo ln -s /etc/nginx/sites-available/owncloud.conf /etc/nginx/sites-enabled/owncloud.conf

echo ""
echo "Ecriture de owncloud.conf :"
echo ""
echo "upstream php-handler {
      server 127.0.0.1:9000;
      # Depending on your used PHP version
      server unix:/var/run/php/php7.3-fpm.sock;
  }

  server {
      listen 80;
      server_name $5;

      # For Lets Encrypt, this needs to be served via HTTP
      location /.well-known/acme-challenge/ {
          root /var/www/owncloud;
      }

      # enforce https
      location / {
          return 301 https://\$server_name\$request_uri;
      }
  }
  
  server {
      listen 443 ssl;
      server_name $5;
 	
      ssl on;
      ssl_certificate /etc/ssl/certs/owncloud.crt;
      ssl_certificate_key /etc/ssl/private/owncloud.key;
 
      # Example SSL/TLS configuration. Please read into the manual of NGINX before applying these.
      ssl_session_timeout 5m;
      ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
      ssl_ciphers \"-ALL:EECDH+AES256:EDH+AES256:AES256-SHA:EECDH+AES:EDH+AES:!ADH:!NULL:!aNULL:!eNULL:!EXPORT:!LOW:!MD5:!3DES:!PSK:!SRP:!DSS:!AESGCM:!RC4\";
      ssl_prefer_server_ciphers on;
      keepalive_timeout    70;
      ssl_stapling on;
      ssl_stapling_verify on;
  
      # Add headers to serve security related headers
      # Before enabling Strict-Transport-Security headers please read into this topic first.
      #add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\";
      add_header X-Content-Type-Options nosniff;
      add_header X-Frame-Options \"SAMEORIGIN\";
      add_header X-XSS-Protection \"1; mode=block\";
      add_header X-Robots-Tag none;
      add_header X-Download-Options noopen;
      add_header X-Permitted-Cross-Domain-Policies none;
  
      # Path to the root of your installation
      root /var/www/owncloud/;
  
      location = /robots.txt {
          allow all;
          log_not_found off;
          access_log off;
      }
  
      # The following 2 rules are only needed for the user_webfinger app.
      # Uncomment it if you're planning to use this app.
      #rewrite ^/.well-known/host-meta /public.php?service=host-meta last;
      #rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json last;
  
      location = /.well-known/carddav {
          return 301 \$scheme://\$host/remote.php/dav;
      }
      location = /.well-known/caldav {
          return 301 \$scheme://\$host/remote.php/dav;
      }
  
      # set max upload size
      client_max_body_size 512M;
      fastcgi_buffers 8 4K;                     # Please see note 1
      fastcgi_ignore_headers X-Accel-Buffering; # Please see note 2
  
      # Disable gzip to avoid the removal of the ETag header
      # Enabling gzip would also make your server vulnerable to BREACH
      # if no additional measures are done. See https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=773332
      gzip off;
  
      # Uncomment if your server is build with the ngx_pagespeed module
      # This module is currently not supported.
      #pagespeed off;
  
      error_page 403 /core/templates/403.php;
      error_page 404 /core/templates/404.php;
  
      location / {
          rewrite ^ /index.php$uri;
      }
  
      location ~ ^/(?:build|tests|config|lib|3rdparty|templates|data)/ {
          return 404;
      }
      location ~ ^/(?:\.|autotest|occ|issue|indie|db_|console) {
          return 404;
      }
  
      location ~ ^/(?:index|remote|public|cron|core/ajax/update|status|ocs/v[12]|updater/.+|ocs-provider/.+|core/templates/40[34])\.php(?:$|/) {
          fastcgi_split_path_info ^(.+\.php)(/.*)$;
          include fastcgi_params;
          fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
          fastcgi_param SCRIPT_NAME \$fastcgi_script_name; # necessary for owncloud to detect the contextroot https://github.com/owncloud/core/blob/v10.0.0/lib/private/AppFramework/Http/Request.php#L603
          fastcgi_param PATH_INFO \$fastcgi_path_info;
          fastcgi_param HTTPS on;
          fastcgi_param modHeadersAvailable true; #Avoid sending the security headers twice
          fastcgi_param front_controller_active true;
          fastcgi_read_timeout 180; # increase default timeout e.g. for long running carddav/ caldav syncs with 1000+ entries
          fastcgi_pass php-handler;
          fastcgi_intercept_errors on;
          fastcgi_request_buffering off; #Available since NGINX 1.7.11
      }
  
      location ~ ^/(?:updater|ocs-provider)(?:$|/) {
          try_files \$uri \$uri/ =404;
          index index.php;
      }
  
      # Adding the cache control header for js and css files
      # Make sure it is BELOW the PHP block
      location ~ \.(?:css|js)$ {
          try_files \$uri /index.php\$uri\$is_args\$args;
          add_header Cache-Control \"max-age=15778463\";
          # Add headers to serve security related headers (It is intended to have those duplicated to the ones above)
          # Before enabling Strict-Transport-Security headers please read into this topic first.
          #add_header Strict-Transport-Security \"max-age=15552000; includeSubDomains\";
          add_header X-Content-Type-Options nosniff;
          add_header X-Frame-Options \"SAMEORIGIN\";
          add_header X-XSS-Protection \"1; mode=block\";
          add_header X-Robots-Tag none;
          add_header X-Download-Options noopen;
          add_header X-Permitted-Cross-Domain-Policies none;
          # Optional: Don't log access to assets
          access_log off;
      }
  
      location ~ \.(?:svg|gif|png|html|ttf|woff|ico|jpg|jpeg|map)$ {
          add_header Cache-Control \"public, max-age=7200\";
          try_files \$uri /index.php\$uri\$is_args\$args;
          # Optional: Don't log access to other assets
          access_log off;
      }
  }" | sudo tee /etc/nginx/sites-available/owncloud.conf

echo ""
echo "Generation du certificat SSL :"
echo ""
sudo script -q -c 'sudo openssl req -new -x509 -days 365 -nodes -out /etc/ssl/certs/owncloud.crt -keyout /etc/ssl/private/owncloud.key' <<ENDDOC /dev/null
FR
France
Paris
Raspberry
Pi
$5
$6
ENDDOC

echo ""
echo "Modification de openssl.cnf"
echo ""
sudo sed -i '$ s/.$/1/' /etc/ssl/openssl.cnf

echo "127.0.0.1       $5" | sudo tee -a /etc/hosts

echo ""
echo "Redemarrage des services :"
echo ""
sudo systemctl reload nginx
sudo systemctl reload php7.3-fpm.service

echo "
███████╗██╗   ██╗ ██████╗ ██████╗███████╗███████╗███████╗███████╗██╗   ██╗██╗     ██╗
██╔════╝██║   ██║██╔════╝██╔════╝██╔════╝██╔════╝██╔════╝██╔════╝██║   ██║██║     ██║
███████╗██║   ██║██║     ██║     █████╗  ███████╗███████╗█████╗  ██║   ██║██║     ██║
╚════██║██║   ██║██║     ██║     ██╔══╝  ╚════██║╚════██║██╔══╝  ██║   ██║██║     ╚═╝
███████║╚██████╔╝╚██████╗╚██████╗███████╗███████║███████║██║     ╚██████╔╝███████╗██╗
╚══════╝ ╚═════╝  ╚═════╝ ╚═════╝╚══════╝╚══════╝╚══════╝╚═╝      ╚═════╝ ╚══════╝╚═╝
                                                                                     "
echo "
Votre cloud personnel est prêt ! Jetez un oeil a $5 !"

fi

